#!/usr/bin/env python3
# -*- encoding: utf-8 -*-

import time
import subprocess
from pwn import *
context.log_level = 'debug'

# Byte sequence alias
A8 = 8 * b'A'

add_status = 0

class Player:
    def __init__(self, game):
        self.game = game
        self._hp = 0
        self._max_hp = 0
        self._atk = 0
        self._def = 0
        self._money = 0

    def update(self):
        self.game.proc.recvuntil('option:')
        self.game.proc.sendline(b'1')

        self.game.proc.recvuntil('HP\t:\t')
        hp = self.game.proc.recvline().decode('utf-8').strip()
        self._hp     = int(hp.split('/')[0])
        self._max_hp = int(hp.split('/')[1])

        self.game.proc.recvuntil('ATK\t:\t')
        self._atk = int(self.game.proc.recvline().decode('utf-8').strip())

        self.game.proc.recvuntil('DEF\t:\t')
        self._def = int(self.game.proc.recvline().decode('utf-8').strip())

        self.game.proc.recvuntil('money\t:\t')
        self._money = int(self.game.proc.recvline().decode('utf-8').strip())


class Game:
    def __init__(self, ip, port):
        self.proc = remote(ip, port)
        self.login()
        self.load_game(True)

        self.player = Player(self)
        self.player.update()

        self.loop()

    def login(self):
        self.proc.recvuntil('hashcash -mb24 ')
        seed = self.proc.recv(8).decode('utf-8')
        hashcash_token = subprocess.run(['hashcash', '-mb24', seed],
                                        capture_output=True).stdout.strip()

        log.info(hashcash_token)
        self.proc.recvuntil('hashcash token: ')
        self.proc.sendline(hashcash_token)


    def load_game(self, should_load):
        self.proc.recvuntil('Load save file?(y/n):')
        self.proc.sendline(b'y')


    def loop(self):
        global add_status

        for i in range(5):
            output = self.proc.recvuntil('option:')

            if b'Add ATK' in output:
                if add_status == 0:
                    self.proc.sendline(b'1')
                elif add_status == 1:
                    self.proc.sendline(b'2')
                else:  # add_status == 2
                    self.proc.sendline(b'3')

                add_status += 1
                add_status %= 3
                self.player.update()
                self.proc.recvuntil('option:')

            # Save game
            self.proc.sendline(b'8')

            # Attack slime
            self.proc.recvuntil('option:')
            self.proc.sendline(b'2')

            # Attack weakest slime
            self.proc.recvuntil('option:')
            self.proc.sendline(b'2')



def main():
    game = Game('203.66.14.26', 31337)
    game.proc.interactive()


if __name__ == '__main__':
    main()
