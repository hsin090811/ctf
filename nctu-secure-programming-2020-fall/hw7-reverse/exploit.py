#!/usr/bin/env python3
# -*- encoding: utf-8 -*-

'''
NCTU SQLAB 309551004 王冠中
[HW 0X07] Going Crazy

usage:
gdb ./gogo
source exploit.py
exploit
'''

import gdb

class Exploit(gdb.Command):
    def __init__ (self):
        super(Exploit, self).__init__("exploit",
                                      gdb.COMMAND_SUPPORT,
                                      gdb.COMPLETE_FILENAME,
                                      True)
        self.payload = [str(i) for i in range(36)]

    def invoke(self, arg, from_tty):
        print('[*] init...')
        gdb.execute('set pagination off')
        gdb.execute('set confirm off')
        gdb.execute('break *0x0048e6bd')
        gdb.execute('break *0x0048e70a')

        target_idx = 0
        for i in range(0, 36):
            for num in range(20, 255):
                self.payload[target_idx] = str(num)
                print(self.prepare_payload())
                print('[*] running program')
                gdb.execute('r < payload.txt')

                for k in range(i):
                    gdb.execute('c')
                    gdb.execute('c')

                # breakpoint 1: 0x0048e6f3 (right before `call bezu()`)
                target_idx = self.get_current_idx()
                gdb.execute('c')

                # breakpoint 2: 0x0048e70a (right before `cmp rcx, rdx`)
                if self.are_rcx_edx_equal():
                    gdb.execute('c')
                    target_idx = self.get_current_idx()
                    with open('result.txt', 'w+') as f:
                        out  = "target_idx: {}".format(target_idx)
                        out += 'x' + ','.join(self.payload) + 'x'
                        f.write(out)
                    break

        print(self.payload)
        #print(''.join([chr(num) for num in payload]))

    def prepare_payload(self) -> str:
        s = 'x' + ','.join(self.payload) + 'x'
        with open('payload.txt', 'w') as f:
            f.write(s + '\n')
        return s

    def get_current_idx(self) -> int:
        gdb.execute('set logging file idx.txt')
        gdb.execute('set logging overwrite on')
        gdb.execute('set logging on')
        gdb.execute('printf "%d\\n",$rcx')
        gdb.execute('set logging off')
        with open('idx.txt', 'r') as f:
            current_idx = int(f.read())
        return current_idx

    def are_rcx_edx_equal(self) -> bool:
        gdb.execute('set logging file reg.txt')
        gdb.execute('set logging overwrite on')
        gdb.execute('set logging on')
        gdb.execute('printf "%d\\n",$rcx')
        gdb.execute('printf "%d\\n",$rdx')
        gdb.execute('set logging off')
        with open('reg.txt', 'r') as f:
            rcx, rdx = f.read().split()
        return rcx == rdx

Exploit()
