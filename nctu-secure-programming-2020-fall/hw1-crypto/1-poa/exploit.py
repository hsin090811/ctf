#!/usr/bin/env python3
from pwn import *

def xor(a, b):
    return bytes([x ^ y for x, y in zip(a, b)])

r = remote("140.112.31.97", 30000)

enc = bytes.fromhex(r.recvline().strip().partition(b' = ')[2].decode())

def oracle(c):
    r.sendlineafter('cipher = ', c.hex())
    if b'YES' in r.recvline():
        return True
    else:
        return False

flag = b''
for i in range(16, len(enc), 16):
    ans = b''
    iv, block = enc[i-16:i], enc[i:i+16]
    for j in range(16):
        for k in range(256):
            # if you change nothing, padding will be correct, but not the case we want
            if k == iv[16 - 1 - j]:
                if i >= 32 and j == 9:
                    ans = bytes([0x80]) + ans
                    print(ans)
                    break
                else:
                    continue

            if oracle(iv[:16 - 1 - j] + bytes([k]) + xor(bytes([0x00] * j), xor(iv[-j:], ans)) + block):
                ans = bytes([iv[16 - 1 - j] ^ k ^ 0x80]) + ans
                print(ans)
                break
    flag += ans

print(flag)
